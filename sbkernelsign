#!/usr/bin/env python3

# Copyright (c) 2018 Anton Semjonov
# Licensed under the MIT License

# Script to automate the bundling and signing of EFISTUB compatible
# kernels into a single singed binary for usage on systems with
# enabled SecureBoot. The DatabaseKey.key must be enrolled in your
# firmware for this to work.

# minimum Python 3.8 required: f"" strings and := operators

import sys, os, re, subprocess, logging, string, shlex, datetime as dt
import tempfile, struct, shutil, configparser as cfp

# get a named logger
logger = lambda s: logging.getLogger(s)

# return a file descriptor number
fd = lambda f: f.fileno()

# ---------- configuration element ---------- #

# load configuration from file and search for kernels
class Configuration(object):

    # default configuration values
    DEFAULTS = {
        "name"    : "${section}",
        "boot"    : "/boot",
        "esp"     : "${boot}/efi",
        "output"  : "${esp}/EFI/Linux/${section}.efi",
        "rexp"    : "(?:.*/|)vmlinuz-([^/]+)$$",
        "stub"    : "/usr/lib/systemd/boot/efi/linuxx64.efi.stub",
        "pki"     : "/etc/efikeys",
        "key"     : "${pki}/DatabaseKey.key",
        "cert"    : "${pki}/DatabaseKey.crt",
        "kernel"  : "${boot}/vmlinuz-${name}",
        "initrd"  : "${boot}/initramfs-${name}.img",
        "cmdline" : "quiet",
    }

    # extended interpolation where ${section} is always the section name
    class ExtendedSectionInterpolation(cfp.ExtendedInterpolation):
        def before_get(self, parser, section, option, value, defaults):
            parser.set(section, "section", section)
            return super().before_get(parser, section, option, value, defaults)
    
    # initialize config parser with extended ${variable} interpolation
    def __init__(self, file):
        self.log = logger("conf")
        self.log.debug(f"load confiuration from {file.name}")
        self.cfg = cfp.ConfigParser(interpolation=self.ExtendedSectionInterpolation())
        self.cfg.read_file(file)
        # write missing default values to DEFAULT section for interpolation
        for key in filter(lambda k: k not in self.cfg.defaults().keys(), self.DEFAULTS.keys()):
            self.cfg.set(self.cfg.default_section, key, self.DEFAULTS[key])
        # assign boot and rexp on self because they're needed later
        self.boot = self.cfg.get(self.cfg.default_section, "boot")
        self.rexp = self.cfg.get(self.cfg.default_section, "rexp")

    # get a value from configuration
    def get(self, option, section=None):
        return self.cfg.get(section or self.cfg.default_section, option)

    # add sections by globbing for kernels on filesystem
    def find_kernels(self):
        self.log.debug(f"find kernels in {self.boot} with /{self.rexp}/")
        kre = re.compile(self.rexp)
        for file in filter(lambda f: f.is_file(), os.scandir(self.boot)):
            if (match := kre.match(file.path)):
                name = match.group(1)
                self.log.debug(f" found kernel: {name}")
                self.add_section(name)

    # ensure that a named kernel config section is present
    def add_section(self, name):
        try: self.cfg.add_section(name)
        except cfp.DuplicateSectionError: pass
        return self.cfg[name]

    # return a generator of Kernel objects for processing
    def kernels(self, specific=None):
        names = (self.cfg.sections() if specific is None else specific)
        if not len(names):
            self.log.debug("empty kernels list!")
            sys.exit(1)
        # add all sections once for interpolation
        for name in names:
            self.add_section(name)
        # generate the configurations
        for name in names:
            section = self.cfg[name]
            # skip if explicitly ignored
            if section.getboolean("ignore", False):
                logger(name).debug("ignored")
                continue
            # transform initrd to list
            items = dict(section.items())
            items["initrd"] = items["initrd"].strip().splitlines()
            # yield a kernel configuration from interpolated values
            yield Kernel(**items)


# ---------- kernel configuration ---------- #

# a single kernel signing configuration and its processing steps
class Kernel(object):

    # functions herein return 'self' for dot-chaining
    def __init__(self, section, stub, kernel, initrd, cmdline, key, cert, output, **rest):
        self.name = section
        self.log = logger(section)
        self.stub = stub
        self.kernel = kernel
        # TODO: automatically find microcode?
        self.initrd = initrd
        self.cmdline = cmdline
        self.key = key
        self.cert = cert
        self.output = output
        self.log.debug("processing configuration:")
        for k in ("stub", "kernel", "initrd", "cmdline", "key", "cert", "output"):
            self.log.debug(f" {k:<8}: {getattr(self, k)!r}")

    # check if all expected files are present and readable
    def check(self):
        for file in [self.kernel, self.stub, *self.initrd, self.key, self.cert]:
            if not os.path.isfile(file):
                raise FileNotFoundError(f"not a file: {file}")
            if not os.access(file, os.R_OK):
                raise PermissionError(f"cannot read file: {file}")
        return self

    # backup existing kernels in-place with a suffix
    def backup(self, suffix="~"):
        if os.path.isfile(self.output):
            backup = self.output + os.path.basename(suffix)
            self.log.debug(f"backing up old kernel to {backup}")
            shutil.copy2(self.output, backup)
        return self

    # delete images for removed kernels
    def remove(self):
        self.backup()
        f = self.output
        self.log.warning(f"removing signed image")
        if not os.path.isfile(f):
            self.log.error(f"file is gone already: {f}")
        else:
            os.unlink(f)
    
    # run this config: check, backup, combine, sign
    def do(self):
        self.check()
        self.backup()
        stub = open(self.stub, 'rb')
        kernel = open(self.kernel, 'rb')
        initrd = [open(i, 'rb') for i in self.initrd]
        output = open(self.output, 'w+b')
        efistubcombine(stub, kernel, initrd, self.cmdline, output, self.name, log=self.log)
        sbsign(output, self.key, self.cert)
        [f.close() for f in [stub, kernel, *initrd, output]]
        return self


# -------- miscellaneous --------- #


# concatenate multiple open files in a spooled tempfile
def concat(*files):
    tmp = tempfile.SpooledTemporaryFile()
    for file in files:
        shutil.copyfileobj(file, tmp)
        file.close()
    tmp.seek(0)
    return tmp

# write bytes to a spooled tempfile
def spool(data):
    tmp = tempfile.SpooledTemporaryFile(mode="wb+")
    tmp.write(data)
    tmp.seek(0)
    return tmp

# parse os-release and return either PRETTY_NAME, NAME or 'Linux'
def get_osname(osrel = "/etc/os-release"):
    with open(osrel, "rt") as file:
        osdict = {}
        for line in file:
            k, v = line.split("=", 1)
            # read token with shlex and remove escapes
            token = shlex.shlex(v, posix=True).get_token()
            osdict[k] = token.replace("\\$", "$").replace("\\`", "`").replace("\\\"", "\"").replace("\\\\", "\\")
        return osdict.get("PRETTY_NAME", osdict.get("NAME", "Linux"))

# generate a minimal os-release dynamically for embedding with efistub
# https://github.com/systemd/systemd/blob/72830b187f5aa06b3e89ca121bbc35451764f1bc/docs/BOOT_LOADER_SPECIFICATION.md#type-2-efi-unified-kernel-images
# https://man7.org/linux/man-pages/man5/os-release.5.html
def osrelease(os, name, version):
    # make a string safe for *_ID fields
    idsub = lambda s: re.sub(r"[^a-z0-9._-]", "", s.lower())
    # make a string safe for *_NAME fields
    trans = { "$": "\\$", "\"": "\\\"", "\\": "\\\\", "`": "\\`" }
    namsub = lambda s: "\"" + "".join((trans.get(c, c) for c in s)) + "\""
    # spool in a temporary file
    tmp = tempfile.SpooledTemporaryFile(mode='wt+')
    print(f"PRETTY_NAME={namsub(os)}", file=tmp)
    print(f"ID={idsub(name)}", file=tmp)
    print(f"VERSION_ID={idsub(version)}", file=tmp)
    # include a timestamp as build id, just in case the above is not unique
    build = dt.datetime.now(dt.timezone.utc).strftime("%FT%H%M%SZ")
    print(f"BUILD_ID={build}", file=tmp)
    tmp.seek(0)
    return tmp

# parse version from an open kernel file
# https://github.com/file/file/blob/31a82018c2ed153b84ea5e115fa855de24eb46d1/magic/Magdir/linux#L109
def parse_kernelversion(k):
    ver = "unknown"
    # save position to restore later
    seek = k.tell()
    try:
        # check 'magic' bytes
        if not k.seek(514) or not k.read(4) == b"HdrS":
            raise ValueError("%s is not a Linux kernel" % k.name)
        # seek to version string via offset
        k.seek(526)
        offset = struct.unpack("<h", k.read(2))[0]
        k.seek(offset + 512)
        # read and split kernel version, restore seek
        ver = k.read(256).split(b" ", 1)[0].decode()
    except: pass
    finally:
        k.seek(seek)
        return ver

# wrapper that generates osreal dynamically and combines kernel
def efistubcombine(efistub, kernel, initrd, cmdline, output, name=None, log=None, **rest):
    # spool cmdline in file
    cmdline = spool(cmdline.encode("utf-8"))
    # generate a spooled osrel file
    osname = get_osname()
    name = os.path.basename(kernel.name) if name is None else name
    version = parse_kernelversion(kernel)
    osrel = osrelease(osname, name, version)
    if log: log.info(f"{osname} ({name}-{version})")
    # combine into output file
    return objcopy(efistub, kernel, initrd, cmdline, osrel, output)

# combine efistub, kernel and initramfs in a single efi executable with objcopy
def objcopy(efistub, kernel, initrd, cmdline, osrel, output):
    # maybe concatenate initramfs in memory
    if isinstance(initrd, list):
        initrd = concat(*initrd)
    # combine with objcopy subprocess
    return subprocess.run([
        "objcopy",
        "--add-section", f".osrel=/dev/fd/{fd(osrel)}",
        "--change-section-vma", ".osrel=0x0020000",
        "--add-section", f".cmdline=/dev/fd/{fd(cmdline)}",
        "--change-section-vma", ".cmdline=0x0030000",
        "--add-section", f".linux=/dev/fd/{fd(kernel)}",
        "--change-section-vma", ".linux=0x2000000",
        "--add-section", f".initrd=/dev/fd/{fd(initrd)}",
        "--change-section-vma", ".initrd=0x3000000",
        f"/dev/fd/{fd(efistub)}",
        f"/dev/fd/{fd(output)}"],
        pass_fds=[fd(f) for f in [efistub, kernel, initrd, cmdline, osrel, output]],
        check=True,
    )

# create a signature on a binary
def sbsign(binary, key, cert):
    return subprocess.run([
        "sbsign", "--key", key, "--cert", cert,
        "--output", f"/dev/fd/{fd(binary)}", f"/dev/fd/{fd(binary)}"],
        pass_fds=[fd(binary)],
        check=True,
    )


# ---------- commandlines ---------- #

# standalone efistub-combine script without signing
class EFIStubCmd(object):
    def __init__(self):
        from argparse import ArgumentParser, FileType
        p = ArgumentParser()
        p.add_argument("-e", dest="efistub", help="efi loader stub", type=FileType('rb'), default=Configuration.DEFAULTS["stub"])
        p.add_argument("-k", dest="kernel", help="linux kernel", type=FileType('rb'), required=True)
        p.add_argument("-i", dest="initrd", help="initramfs image", type=FileType('rb'), action='append', required=True)
        p.add_argument("-c", dest="cmdline", help="kernel commandline", default="")
        p.add_argument("-n", dest="name", help="embed name in osrel", default=None)
        p.add_argument("-o", dest="output", help="output file", type=FileType('wb'), required=True)
        p.add_argument("-v", dest="verbose", help="log parsed osrel info", action="store_true")
        args = p.parse_args()
        logging.basicConfig(format="%(message)s", level=(logging.DEBUG if args.verbose else logging.WARN))
        proc = efistubcombine(**vars(args), log=logger("efistub"))
        exit(proc.returncode)


# parse the commandline and run the appropriate function
class SBKernelSignCmd(object):
    def __init__(self):
        from argparse import ArgumentParser, FileType

        parser = ArgumentParser(description="Bundle and sign kernels for secureboot systems.")
        parser.add_argument("-v", "--verbose", help="increase logging verbosity", action="count", default=2)
        commands = parser.add_subparsers(required=True, metavar="command", help="for help use: <command> --help")
        defaults = dict(config="/etc/sbkernelsign.cfg")

        # --- automatic mode ---
        auto = commands.add_parser("auto", help="automatic, from configuration file")
        auto.add_argument("-c", dest="config", help="configuration file", type=FileType("r"))
        auto.set_defaults(**defaults, func=self.auto)

        # --- package manager hook ---
        hook = commands.add_parser("hook", help="hook mode for pacman")
        hook.add_argument("-c", dest="config", help="configuration file", type=FileType("r"))
        hook.add_argument("-r", dest="remove", help="run kernel removal hook", action="store_true")
        hook.set_defaults(**defaults, func=self.hook)

        # --- sign a binary ---
        sign = commands.add_parser("sign", help="sign a single binary")
        sign.add_argument("-c", dest="config", help="configuration file")
        sign.add_argument("-K", dest="key", help="signing key")
        sign.add_argument("-C", dest="cert", help="signing certificate")
        sign.add_argument("binary", help="binary or kernel to be signed", type=FileType('r+b'))
        sign.set_defaults(**defaults, func=self.sign)

        # --- fully manual ---
        # TODO: somehow use config file as fallback?
        manual = commands.add_parser("manual", help="manual, all args provided")
        manual.add_argument("-k", dest="kernel", help="kernel binary", required=True)
        manual.add_argument("-i", dest="initrd", help="initrd list", nargs="+", metavar="IMG", required=True)
        manual.add_argument("-c", dest="cmdline", help="kernel cmdline", required=True)
        manual.add_argument("-o", dest="output", help="signed kernel output", required=True)
        manual.add_argument("-K", dest="key", help="signing key", required=True)
        manual.add_argument("-C", dest="cert", help="signing certificate", required=True)
        manual.add_argument("-e", dest="stub", help="systemd-boot efistub", required=True)
        manual.set_defaults(**defaults, func=self.manual)

        args = parser.parse_args()
        
        # configure logging format and verbosity
        level = [logging.ERROR, logging.WARNING, logging.INFO, logging.DEBUG]
        level = level[min(len(level) - 1, args.verbose)]
        logging.basicConfig(format="[%(name)s] %(message)s", level=level)
        
        # run subcommand
        args.func(args)

    # automatic mode: search for kernels and combine all
    def auto(self, args):
        conf = Configuration(args.config)
        conf.find_kernels()
        self.do(conf.kernels())

    # hook mode for package managers: parse changed targets from stdin
    def hook(self, args):
        conf = Configuration(args.config)
        conf.find_kernels()
        log = logger("hook")
        targets, full = [], False
        # match against kernel regexp
        kre = re.compile(conf.rexp)
        # special-case for arch linux hooks
        libmod = re.compile(r"^usr/lib/modules/[a-z0-9._-]+/vmlinuz")
        # check lines
        for line in (line.strip() for _, line in enumerate(sys.stdin)):
            if libmod.match(line):
                try:
                    pkgbase = os.path.join("/", os.path.dirname(line), "pkgbase")
                    with open(pkgbase) as file:
                        name = file.readline().strip()
                        log.info(f"matched: {name}")
                        targets.append(name)
                except:
                    log.warning(f"failed reading name from pkgbase for {line}")
                    full = True
            elif (match := kre.match(line)):
                # add all kernel rexp matches to a list
                name = match.group(1)
                log.info(f"matched: {name}")
                targets.append(name)
            else:
                # if any is not a kernel, force full resign
                full = True
                continue
        
        # handle removed kernels and return early
        if args.remove:
            if full: raise Exception("conflict! removal hook called on non-kernel paths")
            for k in conf.kernels(targets): k.remove()
            return

        # full auto rebuild if any target did not match kernel regexp
        if full:
            log.info("forced complete resign")
            targets += conf.cfg.sections()

        # combine and sign kernels
        self.do(conf.kernels(targets))

    # sign a single binary
    def sign(self, args):
        if not (args.key and args.cert):
            with open(args.config) as file:
                conf = Configuration(file)
                if not args.key:  args.key  = conf.get("key")
                if not args.cert: args.cert = conf.get("cert")
        args.binary.seek(0, 2)
        return sbsign(args.binary, args.key, args.cert)

    # fully manual mode, all arguments specified
    def manual(self, args):
        self.do([Kernel("manual", **(args.__dict__))])

    # helper to perform combine and sign
    def do(self, Kernels):
        for k in Kernels: k.do()


# ---------- interactive ---------- #

if __name__ == "__main__":
    # get the filename we're called by
    called = os.path.basename(sys.argv[0])
    # and run appropriate app
    if called.startswith("efistub"): EFIStubCmd()
    else: SBKernelSignCmd()
